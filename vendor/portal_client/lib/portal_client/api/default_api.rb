=begin
#UKCloud Portal API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: development

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.2

=end

require 'cgi'

module PortalClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returns a list of vCloud API credentials associated with the specified account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, VCloudCredentials>]
    def api_accounts_account_id_api_credentials_get(account_id, opts = {})
      data, _status_code, _headers = api_accounts_account_id_api_credentials_get_with_http_info(account_id, opts)
      data
    end

    # Returns a list of vCloud API credentials associated with the specified account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, VCloudCredentials>, Integer, Hash)>] Hash<String, VCloudCredentials> data, response status code and response headers
    def api_accounts_account_id_api_credentials_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_api_credentials_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_api_credentials_get"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_api_credentials_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/accounts/{account_id}/api_credentials'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, VCloudCredentials>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_api_credentials_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about all self-service edge gateway builds for an account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [EdgeGatewayBuilds]
    def api_accounts_account_id_edge_gateway_builds_get(account_id, opts = {})
      data, _status_code, _headers = api_accounts_account_id_edge_gateway_builds_get_with_http_info(account_id, opts)
      data
    end

    # Returns information about all self-service edge gateway builds for an account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdgeGatewayBuilds, Integer, Hash)>] EdgeGatewayBuilds data, response status code and response headers
    def api_accounts_account_id_edge_gateway_builds_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_edge_gateway_builds_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_edge_gateway_builds_get"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_edge_gateway_builds_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/accounts/{account_id}/edge-gateway-builds'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EdgeGatewayBuilds' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_edge_gateway_builds_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about all self-service VDC builds for an account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [VDCBuilds]
    def api_accounts_account_id_vdc_builds_get(account_id, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vdc_builds_get_with_http_info(account_id, opts)
      data
    end

    # Returns information about all self-service VDC builds for an account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [Array<(VDCBuilds, Integer, Hash)>] VDCBuilds data, response status code and response headers
    def api_accounts_account_id_vdc_builds_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vdc_builds_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vdc_builds_get"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vdc_builds_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/accounts/{account_id}/vdc-builds'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VDCBuilds' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vdc_builds_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about all self-service vOrg builds for an account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [VOrgBuilds]
    def api_accounts_account_id_vorg_builds_get(account_id, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vorg_builds_get_with_http_info(account_id, opts)
      data
    end

    # Returns information about all self-service vOrg builds for an account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [Array<(VOrgBuilds, Integer, Hash)>] VOrgBuilds data, response status code and response headers
    def api_accounts_account_id_vorg_builds_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vorg_builds_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vorg_builds_get"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vorg_builds_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/accounts/{account_id}/vorg-builds'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VOrgBuilds' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vorg_builds_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of basic information about VMware compute services (vOrgs) associated with the specified account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def api_accounts_account_id_vorgs_get(account_id, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vorgs_get_with_http_info(account_id, opts)
      data
    end

    # Returns a list of basic information about VMware compute services (vOrgs) associated with the specified account
    # @param account_id [Integer] The ID of your account
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def api_accounts_account_id_vorgs_get_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vorgs_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vorgs_get"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vorgs_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/accounts/{account_id}/vorgs'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse200' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vorgs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a vOrg in the specified account in the specified zone
    # Creates a vOrg in the specified account in the specified zone. The authenticated user who creates the vOrg is automatically granted full administrative control of the compute service, enabling creation of VDCs and edge gateways immediately via the Portal API.
    # @param account_id [Integer] The ID of your account
    # @param v_org_build [VOrgBuild] 
    # @param [Hash] opts the optional parameters
    # @return [VOrgBuild1]
    def api_accounts_account_id_vorgs_post(account_id, v_org_build, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vorgs_post_with_http_info(account_id, v_org_build, opts)
      data
    end

    # Creates a vOrg in the specified account in the specified zone
    # Creates a vOrg in the specified account in the specified zone. The authenticated user who creates the vOrg is automatically granted full administrative control of the compute service, enabling creation of VDCs and edge gateways immediately via the Portal API.
    # @param account_id [Integer] The ID of your account
    # @param v_org_build [VOrgBuild] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VOrgBuild1, Integer, Hash)>] VOrgBuild1 data, response status code and response headers
    def api_accounts_account_id_vorgs_post_with_http_info(account_id, v_org_build, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vorgs_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vorgs_post"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vorgs_post, must be greater than or equal to 0.'
      end

      # verify the required parameter 'v_org_build' is set
      if @api_client.config.client_side_validation && v_org_build.nil?
        fail ArgumentError, "Missing the required parameter 'v_org_build' when calling DefaultApi.api_accounts_account_id_vorgs_post"
      end
      # resource path
      local_var_path = '/api/accounts/{account_id}/vorgs'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(v_org_build) 

      # return_type
      return_type = opts[:return_type] || 'VOrgBuild1' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vorgs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
    # @param account_id [Integer] The ID of your account
    # @param vorg_id [Integer] The ID of the vOrg
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse2001]
    def api_accounts_account_id_vorgs_vorg_id_vdcs_get(account_id, vorg_id, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vorgs_vorg_id_vdcs_get_with_http_info(account_id, vorg_id, opts)
      data
    end

    # Returns a list of basic information about the virtual data centres (VDCs) in the specified account under the specified vOrg
    # @param account_id [Integer] The ID of your account
    # @param vorg_id [Integer] The ID of the vOrg
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def api_accounts_account_id_vorgs_vorg_id_vdcs_get_with_http_info(account_id, vorg_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_get ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_get"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_get, must be greater than or equal to 0.'
      end

      # verify the required parameter 'vorg_id' is set
      if @api_client.config.client_side_validation && vorg_id.nil?
        fail ArgumentError, "Missing the required parameter 'vorg_id' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_get"
      end
      if @api_client.config.client_side_validation && vorg_id < 0
        fail ArgumentError, 'invalid value for "vorg_id" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/accounts/{account_id}/vorgs/{vorg_id}/vdcs'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'vorg_id' + '}', CGI.escape(vorg_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse2001' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vorgs_vorg_id_vdcs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a VDC in the specified account under the specified compute service (vOrg)
    # @param account_id [Integer] The ID of your account
    # @param vorg_id [Integer] The ID of the vOrg
    # @param vdc_build_request [VdcBuildRequest] VDC details to create
    # @param [Hash] opts the optional parameters
    # @return [VDCBuild]
    def api_accounts_account_id_vorgs_vorg_id_vdcs_post(account_id, vorg_id, vdc_build_request, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vorgs_vorg_id_vdcs_post_with_http_info(account_id, vorg_id, vdc_build_request, opts)
      data
    end

    # Creates a VDC in the specified account under the specified compute service (vOrg)
    # @param account_id [Integer] The ID of your account
    # @param vorg_id [Integer] The ID of the vOrg
    # @param vdc_build_request [VdcBuildRequest] VDC details to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(VDCBuild, Integer, Hash)>] VDCBuild data, response status code and response headers
    def api_accounts_account_id_vorgs_vorg_id_vdcs_post_with_http_info(account_id, vorg_id, vdc_build_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_post"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_post, must be greater than or equal to 0.'
      end

      # verify the required parameter 'vorg_id' is set
      if @api_client.config.client_side_validation && vorg_id.nil?
        fail ArgumentError, "Missing the required parameter 'vorg_id' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_post"
      end
      if @api_client.config.client_side_validation && vorg_id < 0
        fail ArgumentError, 'invalid value for "vorg_id" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_post, must be greater than or equal to 0.'
      end

      # verify the required parameter 'vdc_build_request' is set
      if @api_client.config.client_side_validation && vdc_build_request.nil?
        fail ArgumentError, "Missing the required parameter 'vdc_build_request' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_post"
      end
      # resource path
      local_var_path = '/api/accounts/{account_id}/vorgs/{vorg_id}/vdcs'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'vorg_id' + '}', CGI.escape(vorg_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(vdc_build_request) 

      # return_type
      return_type = opts[:return_type] || 'VDCBuild' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vorgs_vorg_id_vdcs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates an edge gateway in the specified account under the specified organisation and VDC
    # @param account_id [Integer] The ID of your account
    # @param vorg_id [Integer] The ID of the vOrg
    # @param vdc_urn [String] The full URN of the VDC in which you want to create the edge gateway, including the urn:vcloud:vdc: prefix
    # @param edge_gateway_build_request [EdgeGatewayBuildRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EdgeGatewayBuild]
    def api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post(account_id, vorg_id, vdc_urn, edge_gateway_build_request, opts = {})
      data, _status_code, _headers = api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post_with_http_info(account_id, vorg_id, vdc_urn, edge_gateway_build_request, opts)
      data
    end

    # Creates an edge gateway in the specified account under the specified organisation and VDC
    # @param account_id [Integer] The ID of your account
    # @param vorg_id [Integer] The ID of the vOrg
    # @param vdc_urn [String] The full URN of the VDC in which you want to create the edge gateway, including the urn:vcloud:vdc: prefix
    # @param edge_gateway_build_request [EdgeGatewayBuildRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdgeGatewayBuild, Integer, Hash)>] EdgeGatewayBuild data, response status code and response headers
    def api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post_with_http_info(account_id, vorg_id, vdc_urn, edge_gateway_build_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post"
      end
      if @api_client.config.client_side_validation && account_id < 0
        fail ArgumentError, 'invalid value for "account_id" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post, must be greater than or equal to 0.'
      end

      # verify the required parameter 'vorg_id' is set
      if @api_client.config.client_side_validation && vorg_id.nil?
        fail ArgumentError, "Missing the required parameter 'vorg_id' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post"
      end
      if @api_client.config.client_side_validation && vorg_id < 0
        fail ArgumentError, 'invalid value for "vorg_id" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post, must be greater than or equal to 0.'
      end

      # verify the required parameter 'vdc_urn' is set
      if @api_client.config.client_side_validation && vdc_urn.nil?
        fail ArgumentError, "Missing the required parameter 'vdc_urn' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post"
      end
      if @api_client.config.client_side_validation && vdc_urn.to_s.length > 51
        fail ArgumentError, 'invalid value for "vdc_urn" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post, the character length must be smaller than or equal to 51.'
      end

      if @api_client.config.client_side_validation && vdc_urn.to_s.length < 51
        fail ArgumentError, 'invalid value for "vdc_urn" when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post, the character length must be great than or equal to 51.'
      end

      pattern = Regexp.new(/^urn:vcloud:vdc:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/)
      if @api_client.config.client_side_validation && vdc_urn !~ pattern
        fail ArgumentError, "invalid value for 'vdc_urn' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'edge_gateway_build_request' is set
      if @api_client.config.client_side_validation && edge_gateway_build_request.nil?
        fail ArgumentError, "Missing the required parameter 'edge_gateway_build_request' when calling DefaultApi.api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post"
      end
      # resource path
      local_var_path = '/api/accounts/{account_id}/vorgs/{vorg_id}/vdcs/{vdc_urn}/edge-gateways'.sub('{' + 'account_id' + '}', CGI.escape(account_id.to_s)).sub('{' + 'vorg_id' + '}', CGI.escape(vorg_id.to_s)).sub('{' + 'vdc_urn' + '}', CGI.escape(vdc_urn.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(edge_gateway_build_request) 

      # return_type
      return_type = opts[:return_type] || 'EdgeGatewayBuild' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_account_id_vorgs_vorg_id_vdcs_vdc_urn_edge_gateways_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of accounts associated with the current user
    # @param [Hash] opts the optional parameters
    # @return [Array<Account>]
    def api_accounts_get(opts = {})
      data, _status_code, _headers = api_accounts_get_with_http_info(opts)
      data
    end

    # Returns a list of accounts associated with the current user
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Account>, Integer, Hash)>] Array<Account> data, response status code and response headers
    def api_accounts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_accounts_get ...'
      end
      # resource path
      local_var_path = '/api/accounts'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Account>' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_accounts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Authenticates your API session
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse201]
    def api_authenticate_post(inline_object, opts = {})
      data, _status_code, _headers = api_authenticate_post_with_http_info(inline_object, opts)
      data
    end

    # Authenticates your API session
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse201, Integer, Hash)>] InlineResponse201 data, response status code and response headers
    def api_authenticate_post_with_http_info(inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_authenticate_post ...'
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling DefaultApi.api_authenticate_post"
      end
      # resource path
      local_var_path = '/api/authenticate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object) 

      # return_type
      return_type = opts[:return_type] || 'InlineResponse201' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_authenticate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provides information about the progress of a specific edge gateway build
    # @param build_id [Integer] The unique ID of the build
    # @param [Hash] opts the optional parameters
    # @return [EdgeGatewayBuild]
    def api_edge_gateway_builds_build_id_get(build_id, opts = {})
      data, _status_code, _headers = api_edge_gateway_builds_build_id_get_with_http_info(build_id, opts)
      data
    end

    # Provides information about the progress of a specific edge gateway build
    # @param build_id [Integer] The unique ID of the build
    # @param [Hash] opts the optional parameters
    # @return [Array<(EdgeGatewayBuild, Integer, Hash)>] EdgeGatewayBuild data, response status code and response headers
    def api_edge_gateway_builds_build_id_get_with_http_info(build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_edge_gateway_builds_build_id_get ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling DefaultApi.api_edge_gateway_builds_build_id_get"
      end
      if @api_client.config.client_side_validation && build_id < 0
        fail ArgumentError, 'invalid value for "build_id" when calling DefaultApi.api_edge_gateway_builds_build_id_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/edge-gateway-builds/{build_id}'.sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'EdgeGatewayBuild' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_edge_gateway_builds_build_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # An endpoint to test API functionality
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_ping_get(opts = {})
      api_ping_get_with_http_info(opts)
      nil
    end

    # An endpoint to test API functionality
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_ping_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_ping_get ...'
      end
      # resource path
      local_var_path = '/api/ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_ping_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the progress of a specific VDC build
    # @param build_id [Integer] The unique ID of the build
    # @param [Hash] opts the optional parameters
    # @return [VDCBuild]
    def api_vdc_builds_build_id_get(build_id, opts = {})
      data, _status_code, _headers = api_vdc_builds_build_id_get_with_http_info(build_id, opts)
      data
    end

    # Returns information about the progress of a specific VDC build
    # @param build_id [Integer] The unique ID of the build
    # @param [Hash] opts the optional parameters
    # @return [Array<(VDCBuild, Integer, Hash)>] VDCBuild data, response status code and response headers
    def api_vdc_builds_build_id_get_with_http_info(build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_vdc_builds_build_id_get ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling DefaultApi.api_vdc_builds_build_id_get"
      end
      if @api_client.config.client_side_validation && build_id < 0
        fail ArgumentError, 'invalid value for "build_id" when calling DefaultApi.api_vdc_builds_build_id_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/vdc-builds/{build_id}'.sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VDCBuild' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_vdc_builds_build_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about the progress of a specific vOrg build
    # @param build_id [Integer] The unique ID of the build
    # @param [Hash] opts the optional parameters
    # @return [VOrgBuild1]
    def api_vorg_builds_build_id_get(build_id, opts = {})
      data, _status_code, _headers = api_vorg_builds_build_id_get_with_http_info(build_id, opts)
      data
    end

    # Returns information about the progress of a specific vOrg build
    # @param build_id [Integer] The unique ID of the build
    # @param [Hash] opts the optional parameters
    # @return [Array<(VOrgBuild1, Integer, Hash)>] VOrgBuild1 data, response status code and response headers
    def api_vorg_builds_build_id_get_with_http_info(build_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.api_vorg_builds_build_id_get ...'
      end
      # verify the required parameter 'build_id' is set
      if @api_client.config.client_side_validation && build_id.nil?
        fail ArgumentError, "Missing the required parameter 'build_id' when calling DefaultApi.api_vorg_builds_build_id_get"
      end
      if @api_client.config.client_side_validation && build_id < 0
        fail ArgumentError, 'invalid value for "build_id" when calling DefaultApi.api_vorg_builds_build_id_get, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/api/vorg-builds/{build_id}'.sub('{' + 'build_id' + '}', CGI.escape(build_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'VOrgBuild1' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#api_vorg_builds_build_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
