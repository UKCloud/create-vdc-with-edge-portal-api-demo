#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'

options = {
  user_email: nil,
  user_password: nil,
  user_api_name: nil,
  portal_host: nil,
  vcloud_api_host: nil,
  org_name: nil,
  account_id: nil,
  vorg_id: nil,
  vdcs: []
}

OptionParser.new do |opts|
  opts.on('--user-email=email') do |v|
    options[:user_email] = v
  end
  opts.on('--user-api-name=name') do |v|
    options[:user_api_name] = v
  end
  opts.on('--portal-host=host') do |v|
    options[:portal_host] = v
  end
  opts.on('--vcloud-api-host=host') do |v|
    options[:vcloud_api_host] = v
  end
  opts.on('--org-name=name') do |v|
    options[:org_name] = v
    options[:account_id] = v.split('-')[1]
    options[:vorg_id] = v.split('-')[2]
  end
end.parse!

options[:vdcs] = ARGV

require 'io/console'
puts 'Please enter user password:'
options[:user_password] = STDIN.noecho(&:gets).chomp

require 'vcloud-rest/connection'
require 'vcr'
require_relative '../lib/portal/client'
require_relative '../lib/portal/vdc'
require_relative '../lib/portal/vorg'

VCR.configure do |config|
  config.cassette_library_dir = 'fixtures/vcr_cassettes'
  config.hook_into :webmock
end

def find_vdc_urn(vcloud_connection, org_urn, vdc_name)
  vorg = vcloud_connection.get_organization(org_urn)
  vdcs = vorg[:vdcs]
  matching_vdcs = vdcs.select { |key| key.end_with?(vdc_name) }
  "urn:vcloud:vdc:#{matching_vdcs.values[0]}"
end

VCR.use_cassette(Time.new.getutc.strftime('%Y-%m-%d_%H-%M-%S'), record: :all) do
  vcloud_connection =
    VCloudClient::Connection.new(
      "https://#{options[:vcloud_api_host]}",
      options[:user_api_name],
      options[:user_password],
      options[:org_name], '27.0'
    )

  print 'logging into vCloud ...'
  vcloud_connection.login
  puts ' done.'

  print 'getting org urn ... '
  org_urn = vcloud_connection.get_organizations[options[:org_name]]
  puts org_urn

  print 'logging into Portal ...'
  portal_session =
    Portal::Client.new(
      options[:portal_host], options[:user_email], options[:user_password]
    ).session
  puts ' done.'

  portal_vorg =
    Portal::Vorg.new(portal_session, options[:account_id], options[:vorg_id])

  vdc_builds = {}

  options[:vdcs].each do |vdc_name|
    print "initiating build of '#{vdc_name}' vdc ..."
    vdc_builds[vdc_name] = portal_vorg.provision_vdc(vdc_name, 'ESSENTIAL')
    puts ' done.'
  end

  vdc_urns = {}

  vdc_builds.each do |vdc_name, vdc_build|
    print "building '#{vdc_name}' vdc "
    until vdc_build.done?
      sleep(5)
      print '.'
      vdc_build = vdc_build.reload
    end
    if vdc_build.succeeded?
      puts ' done.'
      print 'looking for VDC in vCloud Director ...'
      vdc_urns[vdc_name] = find_vdc_urn(vcloud_connection, org_urn, vdc_name)
      puts " #{vdc_urns[vdc_name]}."
    else
      puts ' failed.'
    end
  end

  vdc_urns.each do |vdc_name, vdc_urn|
    print "initiating build of '#{vdc_name}' edge-gateway ..."
    portal_vdc =
      Portal::Vdc.new(
        portal_session, options[:account_id], options[:vorg_id], vdc_urn
      )
    edge_build = portal_vdc.provision_internet_edge_gateway
    puts ' done.'
    print "building '#{vdc_name}' edge-gateway "
    until edge_build.done?
      sleep(5)
      print '.'
      edge_build = edge_build.reload
    end
    if edge_build.succeeded?
      puts ' done.'
    else
      puts ' failed.'
    end
  end
end
